{
  "_args": [
    [
      {
        "raw": "nanoid@^2.1.0",
        "scope": null,
        "escapedName": "nanoid",
        "name": "nanoid",
        "rawSpec": "^2.1.0",
        "spec": ">=2.1.0 <3.0.0",
        "type": "range"
      },
      "C:\\react-project\\react\\todo-api\\node_modules\\json-server"
    ]
  ],
  "_from": "nanoid@^2.1.0",
  "_hasShrinkwrap": false,
  "_id": "nanoid@2.1.6",
  "_location": "/nanoid",
  "_nodeVersion": "13.0.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/nanoid_2.1.6_1571898745245_0.028036510651539892"
  },
  "_npmUser": {
    "name": "ai",
    "email": "andrey@sitnik.ru"
  },
  "_npmVersion": "6.12.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "nanoid@^2.1.0",
    "scope": null,
    "escapedName": "nanoid",
    "name": "nanoid",
    "rawSpec": "^2.1.0",
    "spec": ">=2.1.0 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-server"
  ],
  "_resolved": "https://registry.npmjs.org/nanoid/-/nanoid-2.1.6.tgz",
  "_shasum": "0665418f692e54cf44f34d4010761f3240a03314",
  "_shrinkwrap": null,
  "_spec": "nanoid@^2.1.0",
  "_where": "C:\\react-project\\react\\todo-api\\node_modules\\json-server",
  "author": {
    "name": "Andrey Sitnik",
    "email": "andrey@sitnik.ru"
  },
  "browser": {
    "./index.js": "./index.browser.js",
    "./format.js": "./format.browser.js",
    "./random.js": "./random.browser.js",
    "./async/index.js": "./async/index.browser.js",
    "./async/format.js": "./async/format.browser.js",
    "./async/random.js": "./async/random.browser.js"
  },
  "bugs": {
    "url": "https://github.com/ai/nanoid/issues"
  },
  "dependencies": {},
  "description": "A tiny (139 bytes), secure URL-friendly unique string ID generator",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "integrity": "sha512-2NDzpiuEy3+H0AVtdt8LoFi7PnqkOnIzYmJQp7xsEU6VexLluHQwKREuiz57XaQC5006seIadPrIZJhyS2n7aw==",
    "shasum": "0665418f692e54cf44f34d4010761f3240a03314",
    "tarball": "https://registry.npmjs.org/nanoid/-/nanoid-2.1.6.tgz",
    "fileCount": 22,
    "unpackedSize": 26228,
    "npm-signature": "-----BEGIN PGP SIGNATURE-----\r\nVersion: OpenPGP.js v3.0.4\r\nComment: https://openpgpjs.org\r\n\r\nwsFcBAEBCAAQBQJdsUV5CRA9TVsSAnZWagAARnAP/26ITdqu+VxU08XKW7kI\n1gS5Yiqg9MG7rG6RJOuQUpy/tm+YtRuyvcwaXUl5IYwrAbDMh1A9RXuSARtP\n2KqxSZI6faQR9coX9k7wmNtmMm4VHUMfYWX5qZidOAswGfKoVpIaYNDnEcR5\nRDch0KSL2S5uWry4txU9JLiAuDScXZ1v5o72I+xW64maTlG/M1no6eP3lKtX\nXrd5SDzRb1UAidoUSQrN80T5xnF4G7Ip8HH1C7OGNme0nr6VDvU0U190UySs\nIf6Jv4Cpxy+S7MlBTmcFQUHL4GMP6NLbpNRddgi0nvrKd4ZpJqirrzedt05e\nSqrXggWIUL+3a9Hlom7pgnTMhVYE18i4qvNp3JR0q+QU7Wtd7xslYM/4OWaQ\nH2vA4yaEnzOEJX6hr2CVQYFoJBbwq/2vrtE5ky76VdB90MsJfG4hazwC8Lhq\nZmEUvMbTacyNOyz9esngA15aWHBy03+ylQuhRAFjohCeZtqPovwRYM/VdS6C\nQ7QK0PXnMt5TxCeWCG+FhvcXm9WRHT7TMY3gvHVfGOJfE6lOEUihj8z6q3o5\npuELENfk8g/P1WZ58B41eSyPtlZj/J6Eo059sogwI1wi5VvRJYRhCNZTGR3D\n7ufpEq36wrD+qj1EDqbxIw/TAuIj1ttnKCrmrigDpvagxNGb00E6ke2obejZ\nzwmZ\r\n=ufbu\r\n-----END PGP SIGNATURE-----\r\n"
  },
  "eslintIgnore": [
    "test/demo/build"
  ],
  "homepage": "https://github.com/ai/nanoid#readme",
  "keywords": [
    "uuid",
    "random",
    "id",
    "url"
  ],
  "license": "MIT",
  "maintainers": [
    {
      "name": "ai",
      "email": "andrey@sitnik.ru"
    }
  ],
  "name": "nanoid",
  "optionalDependencies": {},
  "react-native": {
    "./async/random.js": "./async/random.rn.js"
  },
  "readme": "# Nano ID\n\n<img src=\"https://ai.github.io/nanoid/logo.svg\" align=\"right\"\n     alt=\"Nano ID logo by Anton Lovchikov\" width=\"180\" height=\"94\">\n\nA tiny, secure, URL-friendly, unique string ID generator for JavaScript.\n\n* **Small.** 139 bytes (minified and gzipped). No dependencies.\n  [Size Limit] controls the size.\n* **Safe.** It uses cryptographically strong random APIs.\n  Can be used in clusters.\n* **Fast.** It’s 16% faster than UUID.\n* **Compact.** It uses a larger alphabet than UUID (`A-Za-z0-9_-`).\n  So ID size was reduced from 36 to 21 symbols.\n\n```js\nconst nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"V1StGXR8_Z5jdHi6B-myT\"\n```\n\nSupports [all browsers], Node.js and React Native.\n\n[all browsers]: http://caniuse.com/#feat=getrandomvalues\n[Size Limit]:   https://github.com/ai/size-limit\n\n<a href=\"https://evilmartians.com/?utm_source=nanoid\">\n  <img src=\"https://evilmartians.com/badges/sponsored-by-evil-martians.svg\"\n       alt=\"Sponsored by Evil Martians\" width=\"236\" height=\"54\">\n</a>\n\n## Table of Contents\n\n1. [Comparison with UUID](#comparison-with-uuid)\n2. [Benchmark](#benchmark)\n4. [Tools](#tools)\n3. [Security](#security)\n6. Usage\n   1. [JS](#js)\n   2. [React](#react)\n   3. [React Native](#react-native)\n   4. [Web Workers](#web-workers)\n   5. [PouchDB and CouchDB](#pouchdb-and-couchdb)\n   5. [Mongoose](#mongoose)\n   6. [Other Programming Languages](#other-programming-languages)\n7. API\n   1. [Async](#async)\n   2. [Non-Secure](#non-secure)\n   3. [Custom Alphabet or Length](#custom-alphabet-or-length)\n   4. [Custom Random Bytes Generator](#custom-random-bytes-generator)\n\n\n## Comparison with UUID\n\nNano ID is quite comparable to UUID v4 (random-based).\nIt has a similar number of random bits in the ID\n(126 in Nano ID and 122 in UUID), so it has a similar collision probability:\n\n> For there to be a one in a billion chance of duplication,\n> 103 trillion version 4 IDs must be generated.\n\nThere are three main differences between Nano ID and UUID v4:\n\n1. Nano ID uses a bigger alphabet, so a similar number of random bits\n   are packed in just 21 symbols instead of 36.\n2. Nano ID code is 3 times less than `uuid/v4` package:\n   139 bytes instead of 435.\n3. Because of memory allocation tricks, Nano ID is 16% faster than UUID.\n\n\n## Benchmark\n\n```rust\n$ ./test/benchmark\nnanoid                    693,132 ops/sec\nnanoid/generate           624,291 ops/sec\nuid.sync                  487,706 ops/sec\nuuid/v4                   471,299 ops/sec\nsecure-random-string      448,386 ops/sec\nshortid                    66,809 ops/sec\n\nAsync:\nnanoid/async              105,024 ops/sec\nnanoid/async/generate     106,682 ops/sec\nsecure-random-string       94,217 ops/sec\nuid                        92,026 ops/sec\n\nNon-secure:\nnanoid/non-secure       2,555,814 ops/sec\nrndm                    2,413,565 ops/sec\n```\n\n\n## Tools\n\n* [ID size calculator] to choice smaller ID size depends on your case.\n* [`nanoid-dictionary`] with popular alphabets to use with `nanoid/generate`.\n* [`nanoid-cli`] to generate ID from CLI.\n* [`nanoid-good`] to be sure that your ID doesn't contain any obscene words.\n\n[`nanoid-dictionary`]: https://github.com/CyberAP/nanoid-dictionary\n[ID size calculator]:  https://zelark.github.io/nano-id-cc/\n[`nanoid-cli`]:        https://github.com/twhitbeck/nanoid-cli\n[`nanoid-good`]:       https://github.com/y-gagar1n/nanoid-good\n\n\n## Security\n\n*See a good article about random generators theory:\n[Secure random values (in Node.js)]*\n\n\n### Unpredictability\n\nInstead of using the unsafe `Math.random()`, Nano ID uses the `crypto` module\nin Node.js and the Web Crypto API in browsers. These modules use unpredictable\nhardware random generator.\n\n\n### Uniformity\n\n`random % alphabet` is a popular mistake to make when coding an ID generator.\nThe spread will not be even; there will be a lower chance for some symbols\nto appear compared to others—so it will reduce the number of tries\nwhen brute-forcing.\n\nNano ID uses a [better algorithm] and is tested for uniformity.\n\n<img src=\"img/distribution.png\" alt=\"Nano ID uniformity\"\n     width=\"340\" height=\"135\">\n\n[Secure random values (in Node.js)]: https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba\n[better algorithm]: https://github.com/ai/nanoid/blob/master/format.js\n\n\n### Vulnerabilities\n\nTo report a security vulnerability, please use the\n[Tidelift security contact](https://tidelift.com/security).\nTidelift will coordinate the fix and disclosure.\n\n\n## Usage\n\n### JS\n\nThe main module uses URL-friendly symbols (`A-Za-z0-9_-`) and returns an ID\nwith 21 characters (to have a collision probability similar to UUID v4).\n\n```js\nconst nanoid = require('nanoid')\nmodel.id = nanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nIf you want to reduce ID length (and increase collisions probability),\nyou can pass the length as an argument.\n\n```js\nnanoid(10) //=> \"IRFa-VaY2b\"\n```\n\nDon’t forget to check the safety of your ID length\nin our [ID collision probability] calculator.\n\nYou can also use [custom alphabet](#custom-alphabet-or-length)\nor [random generator](#custom-random-bytes-generator).\n\n[ID collision probability]: https://zelark.github.io/nano-id-cc/\n\n\n### React\n\n**Do not** use a nanoid for `key` prop. In React `key` should be consistence\nbetween renders. This is bad code:\n\n```jsx\n<Item key={nanoid()} /> /* DON’T DO IT */\n```\n\nThis is good code. `this.id` will be generated only once:\n\n```jsx\n  id = nanoid()\n  render () {\n    return <Item key={this.id}>;\n  }\n}\n```\n\nIf you want to use Nano ID for `id`, you must to set some string prefix.\nNano ID could be started from number. HTML ID can’t be started from the number.\n\n```jsx\n<input id={'id' + this.id} type=\"text\"/>\n```\n\n\n### React Native\n\nReact Native doesn’t have built-in random generator.\n\n1. Check [`expo-random`] docs and install it.\n2. Use `nanoid/async` instead of synchronous `nanoid`.\n\n```js\nconst nanoid = require('nanoid/async')\n\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\n\n### PouchDB and CouchDB\n\nIn PouchDB and CouchDB, IDs can’t start with an underscore `_`.\nA prefix is required to prevent this issue, as Nano ID might use a `_`\nat the start of the ID by default.\n\nOverride the default ID with the following option:\n\n```js\ndb.put({\n  _id: 'id' + nanoid(),\n  …\n})\n```\n\n\n### Mongoose\n\n```js\nconst mySchema = new Schema({\n  _id: {\n    type: String,\n    default: () => nanoid()\n  }\n})\n```\n\n\n### Web Workers\n\nWeb Workers don’t have access to a secure random generator.\n\nSecurity is important in IDs, when IDs should be unpredictable. For instance,\nin “access by URL” link generation.\n\nIf you don’t need unpredictable IDs, but you need Web Workers support,\nyou can use non‑secure ID generator. Note, that they have bigger collision\nprobability.\n\n```js\nconst nanoid = require('nanoid/non-secure')\nnanoid() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\n\n### Other Programming Languages\n\nNano ID was ported to many languages. You can use these ports to have the same\nID generators on client and server side.\n\n* [C#](https://github.com/codeyu/nanoid-net)\n* [Clojure and ClojureScript](https://github.com/zelark/nano-id)\n* [Crystal](https://github.com/mamantoha/nanoid.cr)\n* [Dart](https://github.com/pd4d10/nanoid-dart)\n* [Go](https://github.com/matoous/go-nanoid)\n* [Elixir](https://github.com/railsmechanic/nanoid)\n* [Haskell](https://github.com/4e6/nanoid-hs)\n* [Java](https://github.com/aventrix/jnanoid)\n* [Nim](https://github.com/icyphox/nanoid.nim)\n* [PHP](https://github.com/hidehalo/nanoid-php)\n* [Python](https://github.com/puyuan/py-nanoid) with [dictionaries](https://pypi.org/project/nanoid-dictionary)\n* [Ruby](https://github.com/radeno/nanoid.rb)\n* [Rust](https://github.com/nikolay-govorov/nanoid)\n* [Swift](https://github.com/antiflasher/NanoID)\n\nAlso, [CLI tool] is available to generate IDs from a command line.\n\n[CLI tool]: https://github.com/twhitbeck/nanoid-cli\n\n\n## API\n\n### Async\n\nTo generate hardware random bytes, CPU will collect electromagnetic noise.\nDuring the collection, CPU doesn’t work.\n\nIf we will use asynchronous API for random generator,\nanother code could be executed during the entropy collection.\n\n```js\nconst nanoid = require('nanoid/async')\n\nasync function createUser () {\n  user.id = await nanoid()\n}\n```\n\nUnfortunately, you will not have any benefits in a browser, since Web Crypto API\ndoesn’t have asynchronous API.\n\n\n### Non-Secure\n\nBy default, Nano ID uses hardware random generator for security\nand low collision probability. If you don’t need it, you can use\nvery fast non-secure generator.\n\n```js\nconst nonSecure = require('nanoid/non-secure')\nconst id = nonSecure() //=> \"Uakgb_J5m9g-0JDMbcJqLJ\"\n```\n\nNote that it is predictable and have bigger collision probability.\n\n\n### Custom Alphabet or Length\n\nIf you want to change the ID's alphabet or length\nyou can use the low-level `generate` module.\n\n```js\nconst generate = require('nanoid/generate')\nmodel.id = generate('1234567890abcdef', 10) //=> \"4f90d13a42\"\n```\n\nCheck the safety of your custom alphabet and ID length\nin our [ID collision probability] calculator.\nYou can find popular alphabets in [`nanoid-dictionary`].\n\nAlphabet must contain 256 symbols or less.\nOtherwise, the generator will not be secure.\n\nAsynchronous and non-secure API is also available:\n\n```js\nconst generate = require('nanoid/async/generate')\nasync function createUser () {\n  user.id = await generate('1234567890abcdef', 10)\n}\n```\n\n```js\nconst generate = require('nanoid/non-secure/generate')\n\nuser.id = generate('1234567890abcdef', 10)\n```\n\n[ID collision probability]: https://alex7kom.github.io/nano-nanoid-cc/\n[`nanoid-dictionary`]:      https://github.com/CyberAP/nanoid-dictionary\n\n\n### Custom Random Bytes Generator\n\nYou can replace the default safe random generator using the `format` module.\nFor instance, to use a seed-based generator.\n\n```js\nconst format = require('nanoid/format')\n\nfunction random (size) {\n  const result = []\n  for (let i = 0; i < size; i++) {\n    result.push(randomByte())\n  }\n  return result\n}\n\nformat(random, \"abcdef\", 10) //=> \"fbaefaadeb\"\n```\n\n`random` callback must accept the array size and return an array\nwith random numbers.\n\nIf you want to use the same URL-friendly symbols with `format`,\nyou can get the default alphabet from the `url` file.\n\n```js\nconst url = require('nanoid/url')\nformat(random, url, 10) //=> \"93ce_Ltuub\"\n```\n\nAsynchronous API is also available:\n\n```js\nconst format = require('nanoid/async/format')\nconst url = require('nanoid/url')\n\nfunction random (size) {\n  return new Promise(…)\n}\n\nasync function createUser () {\n  user.id = await format(random, url, 10)\n}\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/ai/nanoid.git"
  },
  "sharec": {
    "config": "@logux/sharec-config",
    "version": "0.5.3"
  },
  "sideEffects": false,
  "version": "2.1.6"
}
