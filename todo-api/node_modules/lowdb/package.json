{
  "_args": [
    [
      {
        "raw": "lowdb@^1.0.0",
        "scope": null,
        "escapedName": "lowdb",
        "name": "lowdb",
        "rawSpec": "^1.0.0",
        "spec": ">=1.0.0 <2.0.0",
        "type": "range"
      },
      "C:\\react-project\\react\\todo-api\\node_modules\\json-server"
    ]
  ],
  "_from": "lowdb@>=1.0.0 <2.0.0",
  "_id": "lowdb@1.0.0",
  "_inCache": true,
  "_location": "/lowdb",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/lowdb-1.0.0.tgz_1504211136668_0.8861918419133872"
  },
  "_npmUser": {
    "name": "typicode",
    "email": "typicode@gmail.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "lowdb@^1.0.0",
    "scope": null,
    "escapedName": "lowdb",
    "name": "lowdb",
    "rawSpec": "^1.0.0",
    "spec": ">=1.0.0 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/json-server"
  ],
  "_resolved": "https://registry.npmjs.org/lowdb/-/lowdb-1.0.0.tgz",
  "_shasum": "5243be6b22786ccce30e50c9a33eac36b20c8064",
  "_shrinkwrap": null,
  "_spec": "lowdb@^1.0.0",
  "_where": "C:\\react-project\\react\\todo-api\\node_modules\\json-server",
  "author": {
    "name": "Typicode",
    "email": "typicode@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/typicode/lowdb/issues"
  },
  "dependencies": {
    "graceful-fs": "^4.1.3",
    "is-promise": "^2.1.0",
    "lodash": "4",
    "pify": "^3.0.0",
    "steno": "^0.4.1"
  },
  "description": "Small JSON database for Node, Electron and the browser. Powered by Lodash.",
  "devDependencies": {
    "babel-cli": "^6.2.0",
    "babel-eslint": "^7.0.0",
    "babel-jest": "^20.0.3",
    "babel-loader": "^7.1.1",
    "babel-polyfill": "^6.9.1",
    "babel-preset-env": "^1.6.0",
    "babel-register": "^6.9.0",
    "delay": "^2.0.0",
    "eslint": "^4.5.0",
    "eslint-config-prettier": "^2.3.0",
    "eslint-config-standard": "^10.2.1",
    "eslint-plugin-import": "^2.6.1",
    "eslint-plugin-node": "^5.1.0",
    "eslint-plugin-prettier": "^2.1.2",
    "eslint-plugin-promise": "^3.5.0",
    "eslint-plugin-standard": "^3.0.1",
    "husky": "^0.14.3",
    "jest": "^20.0.4",
    "lodash-id": "^0.14.0",
    "mv": "^2.1.1",
    "pkg-ok": "^1.0.1",
    "prettier": "^1.5.2",
    "ramda": "^0.24.1",
    "regenerator-runtime": "^0.11.0",
    "rimraf": "^2.5.4",
    "sinon": "^3.2.1",
    "tempfile": "^2.0.0",
    "webpack": "^3.3.0"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-2+x8esE/Wb9SQ1F9IHaYWfsC9FIecLOPrK4g17FGEayjUWH172H6nwicRovGvSE2CPZouc2MCIqCI7h9d+GftQ==",
    "shasum": "5243be6b22786ccce30e50c9a33eac36b20c8064",
    "tarball": "https://registry.npmjs.org/lowdb/-/lowdb-1.0.0.tgz"
  },
  "engines": {
    "node": ">=4"
  },
  "gitHead": "7623a58753f63c84ef9c2c3513444bc86a01204d",
  "homepage": "https://github.com/typicode/lowdb",
  "keywords": [
    "flat",
    "file",
    "local",
    "database",
    "storage",
    "JSON",
    "lodash",
    "localStorage",
    "electron",
    "embed",
    "embeddable"
  ],
  "license": "MIT",
  "main": "./lib/main.js",
  "maintainers": [
    {
      "name": "typicode",
      "email": "typicode@gmail.com"
    }
  ],
  "name": "lowdb",
  "optionalDependencies": {},
  "readme": "# Lowdb\n\n[![](http://img.shields.io/npm/dm/lowdb.svg?style=flat)](https://www.npmjs.org/package/lowdb) [![NPM version](https://badge.fury.io/js/lowdb.svg)](http://badge.fury.io/js/lowdb) [![Build Status](https://travis-ci.org/typicode/lowdb.svg?branch=master)](https://travis-ci.org/typicode/lowdb) [![Donate](https://img.shields.io/badge/patreon-donate-ff69b4.svg)](https://www.patreon.com/typicode)\n\n> Small JSON database for Node, Electron and the browser. Powered by Lodash. :zap:\n\n```js\ndb.get('posts')\n  .push({ id: 1, title: 'lowdb is awesome'})\n  .write()\n```\n\n## Usage\n\n```sh\nnpm install lowdb\n```\n\n```js\nconst low = require('lowdb')\nconst FileSync = require('lowdb/adapters/FileSync')\n\nconst adapter = new FileSync('db.json')\nconst db = low(adapter)\n\n// Set some defaults\ndb.defaults({ posts: [], user: {} })\n  .write()\n\n// Add a post\ndb.get('posts')\n  .push({ id: 1, title: 'lowdb is awesome'})\n  .write()\n\n// Set a user using Lodash shorthand syntax\ndb.set('user.name', 'typicode')\n  .write()\n```\n\nData is saved to `db.json`\n\n```json\n{\n  \"posts\": [\n    { \"id\": 1, \"title\": \"lowdb is awesome\"}\n  ],\n  \"user\": {\n    \"name\": \"typicode\"\n  }\n}\n```\n\nYou can use any [lodash](https://lodash.com/docs) function like [`_.get`](https://lodash.com/docs#get) and [`_.find`](https://lodash.com/docs#find) with shorthand syntax.\n\n```js\n// Use .value() instead of .write() if you're only reading from db\ndb.get('posts')\n  .find({ id: 1 })\n  .value()\n```\n\nLowdb is perfect for CLIs, small servers, Electron apps and npm packages in general.\n\nIt supports __Node__, the __browser__ and uses __lodash API__, so it's very simple to learn. Actually, if you know Lodash, you already know how to use lowdb :wink:\n\n* [Usage examples](https://github.com/typicode/lowdb/tree/master/examples)\n  * [CLI](https://github.com/typicode/lowdb/tree/master/examples#cli)\n  * [Browser](https://github.com/typicode/lowdb/tree/master/examples#browser)\n  * [Server](https://github.com/typicode/lowdb/tree/master/examples#server)\n  * [In-memory](https://github.com/typicode/lowdb/tree/master/examples#in-memory)\n* [JSFiddle live example](https://jsfiddle.net/typicode/4kd7xxbu/)\n\n__Important__ lowdb doesn't support Cluster and may have issues with very large JSON files (~200MB).\n\n## Install\n\n```sh\nnpm install lowdb\n```\n\nAlternatively, if you're using [yarn](https://yarnpkg.com/)\n\n```sh\nyarn add lowdb\n```\n\nA UMD build is also available on [unpkg](https://unpkg.com/) for testing and quick prototyping:\n\n```html\n<script src=\"https://unpkg.com/lodash@4/lodash.min.js\"></script>\n<script src=\"https://unpkg.com/lowdb@0.17/dist/low.min.js\"></script>\n<script src=\"https://unpkg.com/lowdb@0.17/dist/LocalStorage.min.js\"></script>\n<script>\n  var adapter = new LocalStorage('db')\n  var db = low(adapter)\n</script>\n```\n\n## API\n\n__low(adapter)__\n\nReturns a lodash [chain](https://lodash.com/docs/4.17.4#chain) with additional properties and functions described below.\n\n__db.[...].write()__\n\n__db.[...].value()__\n\n`write()` is syntactic sugar for calling `value()` and `db.write()` in one line. \n\nOn the other hand, `value()` is just [\\_.protoype.value()](https://lodash.com/docs/4.17.4#prototype-value) and should be used to execute a chain that doesn't change database state.\n\n\n```js\ndb.set('user.name', 'typicode')\n  .write()\n\n// is equivalent to\ndb.set('user.name', 'typicode')\n  .value()\n\ndb.write()\n```\n\n__db.___\n\nDatabase lodash instance. Use it to add your own utility functions or third-party mixins like [underscore-contrib](https://github.com/documentcloud/underscore-contrib) or [lodash-id](https://github.com/typicode/lodash-id).\n\n```js\ndb._.mixin({\n  second: function(array) {\n    return array[1]\n  }\n})\n\ndb.get('posts')\n  .second()\n  .value()\n```\n\n__db.getState()__\n\nReturns database state.\n\n```js\ndb.getState() // { posts: [ ... ] }\n```\n\n__db.setState(newState)__\n\nReplaces database state.\n\n```js\nconst newState = {}\ndb.setState(newState)\n```\n\n__db.write()__\n\nPersists database using `adapter.write` (depending on the adapter, may return a promise).\n\n```js\n// With lowdb/adapters/FileSync\ndb.write()\nconsole.log('State has been saved')\n\n// With lowdb/adapters/FileAsync\ndb.write()\n  .then(() => console.log('State has been saved'))\n```\n\n__db.read()__\n\nReads source using `storage.read` option (depending on the adapter, may return a promise).\n\n```js\n// With lowdb/FileSync\ndb.read()\nconsole.log('State has been updated')\n\n// With lowdb/FileAsync\ndb.write()\n  .then(() => console.log('State has been updated'))\n```\n\n## Adapters API\n\nPlease note this only applies to adapters bundled with Lowdb. Third-party adapters may have different options.\n\nFor convenience, `FileSync`, `FileAsync` and `LocalBrowser` accept the following options:\n\n* __defaultValue__ if file doesn't exist, this value will be used to set the initial state (default: `{}`)\n* __serialize/deserialize__ functions used before writing and after reading (default: `JSON.stringify` and `JSON.parse`)\n\n```js\nconst adapter = new FileSync('array.yaml', {\n  defaultValue: [],\n  serialize: (array) => toYamlString(array),\n  deserialize: (string) => fromYamlString(string)\n})\n```\n\n## Guide\n\n### How to query\n\nWith lowdb, you get access to the entire [lodash API](http://lodash.com/), so there are many ways to query and manipulate data. Here are a few examples to get you started.\n\nPlease note that data is returned by reference, this means that modifications to returned objects may change the database. To avoid such behaviour, you need to use `.cloneDeep()`.\n\nAlso, the execution of methods is lazy, that is, execution is deferred until `.value()` or `.write()` is called.\n\n#### Examples\n\nCheck if posts exists.\n\n```js\ndb.has('posts')\n  .value()\n```\n\nSet posts.\n\n```js\ndb.set('posts', [])\n  .write()\n```\n\n\nSort the top five posts.\n\n```js\ndb.get('posts')\n  .filter({published: true})\n  .sortBy('views')\n  .take(5)\n  .value()\n```\n\nGet post titles.\n\n```js\ndb.get('posts')\n  .map('title')\n  .value()\n```\n\nGet the number of posts.\n\n```js\ndb.get('posts')\n  .size()\n  .value()\n```\n\nGet the title of first post using a path.\n\n```js\ndb.get('posts[0].title')\n  .value()\n```\n\nUpdate a post.\n\n```js\ndb.get('posts')\n  .find({ title: 'low!' })\n  .assign({ title: 'hi!'})\n  .write()\n```\n\nRemove posts.\n\n```js\ndb.get('posts')\n  .remove({ title: 'low!' })\n  .write()\n```\n\nRemove a property.\n\n```js\ndb.unset('user.name')\n  .write()\n```\n\nMake a deep clone of posts.\n\n```js\ndb.get('posts')\n  .cloneDeep()\n  .value()\n```\n\n### How to use id based resources\n\nBeing able to get data using an id can be quite useful, particularly in servers. To add id-based resources support to lowdb, you have 2 options.\n\n[shortid](https://github.com/dylang/shortid) is more minimalist and returns a unique id that you can use when creating resources.\n\n```js\nconst shortid = require('shortid')\n\nconst postId = db\n  .get('posts')\n  .push({ id: shortid.generate(), title: 'low!' })\n  .write()\n  .id\n\nconst post = db\n  .get('posts')\n  .find({ id: postId })\n  .value()\n```\n\n[lodash-id](https://github.com/typicode/lodash-id) provides a set of helpers for creating and manipulating id-based resources.\n\n```js\nconst lodashId = require('lodash-id')\nconst db = low('db.json')\n\ndb._.mixin(lodashId)\n\nconst post = db\n  .get('posts')\n  .insert({ title: 'low!' })\n  .write()\n\nconst post = db\n  .get('posts')\n  .getById(post.id)\n  .value()\n```\n\n### How to create custom adapters\n\n`low()` accepts custom Adapter, so you can virtually save your data to any storage using any format.\n\n```js\nclass MyStorage {\n  constructor() {\n    // ...\n  }\n\n  read() {\n    // Should return data (object or array) or a Promise\n  }\n\n  write(data) {\n    // Should return nothing or a Promise\n  }\n}\n\nconst adapter = new MyStorage(args)\nconst db = low()\n```\n\nSee [src/adapters](src/adapters) for examples.\n\n### How to encrypt data\n\n`FileSync`, `FileAsync` and `LocalStorage` accept custom `serialize` and `deserialize` functions. You can use them to add encryption logic.\n\n```js\nconst adapter = new FileSync('db.json', {\n  serialize: (data) => encrypt(JSON.stringify(data))\n  deserialize: (data) => JSON.parse(decrypt(data))\n})\n```\n\n## Changelog\n\nSee changes for each version in the [release notes](https://github.com/typicode/lowdb/releases).\n\n## Limits\n\nLowdb is a convenient method for storing data without setting up a database server. It is fast enough and safe to be used as an embedded database.\n\nHowever, if you seek high performance and scalability more than simplicity, you should probably stick to traditional databases like MongoDB.\n\n## License\n\nMIT - [Typicode :cactus:](https://github.com/typicode)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/typicode/lowdb.git"
  },
  "scripts": {
    "build": "npm run build:lib && npm run build:dist",
    "build:dist": "rimraf dist && webpack && webpack -p",
    "build:lib": "rimraf lib && babel src --out-dir lib && npm run mvAdapters",
    "fix": "npm run lint -- --fix",
    "lint": "eslint . --ignore-path .gitignore",
    "mvAdapters": "rimraf adapters && mv lib/adapters .",
    "precommit": "npm test",
    "prepublishOnly": "npm run build && pkg-ok",
    "test": "jest && npm run lint"
  },
  "version": "1.0.0"
}
